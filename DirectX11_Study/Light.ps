////////////////////////////////////////////
// Filename : Color.ps
////////////////////////////////////////////

/////////////
// GLOBALS //
/////////////
Texture2D shaderTexture;
SamplerState SampleType;

cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor;
	float3 lightDirection;
	float specularPower;		// 순서 주의.
	float4 specularColor;
}


//////////////
// TYPEDEFS //
//////////////
struct PixelInputType 
{
	float4 position : SV_POSITION; 
	float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	float3 viewDirection : TEXCOORD1;
};


///////////////////////////////////
// Pixel Shader
///////////////////////////////////
float4 LightPixelShader(PixelInputType input) : SV_TARGET
{ 
	// 이 텍스쳐 좌표 위치에서 샘플러를 사용하여 텍스쳐에서 픽셀 색상을 샘플링합니다.
	float4 textureColor = shaderTexture.Sample(SampleType, input.tex);

	// 모든 픽셀의 기본 출력 색상을 주변 광원 값으로 설정합니다.
	float4 color = ambientColor;

	// specular 초기화.
	float4 specular = float4(0.0f, 0.0f, 0.0f, 0.0f);

	// 계산을 위해 빛의 방향을 반전시킵니다.
	float3 lightDir = -lightDirection;

	// 이 픽셀의 빛의 양을 계산합니다.
	float lightIntensity = saturate(dot(input.normal, lightDir));

	if(lightIntensity > 0.0f)
	{
		color += diffuseColor * lightIntensity;
		color = saturate(color);

		// 정반사광 로직.
		// 반사벡터 계산.
		float3 reflection = normalize(2 * lightIntensity * input.normal - lightDir);

		// 정반사광의 조명 양을 계산.
		specular = pow(saturate(dot(reflection, input.viewDirection)), specularPower);
	}

	// 텍스쳐 픽셀과 최종 확산 색을 곱하여 최종 색상 결과를 얻습니다.
	color = color * textureColor;

	// 출력 색상의 마지막에 정반사광 추가.
	color = saturate(color + specular);

	return color;
}

